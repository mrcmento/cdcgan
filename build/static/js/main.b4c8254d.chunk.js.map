{"version":3,"sources":["components/carousel.component.js","components/dropdown.js","components/ImageGenerator.js","components/Home.js","components/About.js","components/Header.js","components/Background.js","App.js","serviceWorker.js","index.js"],"names":["CarouselComponent","props","className","loading","style","position","top","left","transform","type","color","height","width","onChange","selectedItem","handleClick","showArrows","showStatus","showThumbs","showIndicators","swipeable","content","map","d","key","src","lineHeight","DropDown","defaultValue","currentClass","event","handleChange","parseInt","target","value","name","id","ImageGenerator","onModelLoaded","Promise","a","tf","model","samples","nums","i","u","v","Math","random","push","sqrt","log","cos","PI","imageClass","z_input","this","randn_bm","latent_dim","labels","raw","predict","dataSync","Array","from","data","length","pixel","canvas","document","createElement","context","getContext","imageData","ImageData","set","putImageData","toDataURL","Home","genIfNeeded","bind","updateClass","imageGenerator","nInitialPics","state","images","setState","genInitialPics","generateImage","setTimeout","pos","React","Component","About","url","playing","loop","muted","controls","href","rel","Header","Background","backgroundImage","App","exact","path","to","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4c8254d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Carousel } from 'react-responsive-carousel';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport Loader from 'react-loader-spinner';\n\nfunction CarouselComponent(props){\n    const style = { position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" };\n    return ( \n        <div className=\"shoecarousel\">\n            {props.loading ?  <Loader style = {style} type=\"Grid\" color=\"#2BAD60\" height=\"100\" width=\"100\" /> : \n                <div>\n                    <Carousel onChange={(selectedItem) => {props.handleClick(selectedItem); }}\n                            showArrows={true} showStatus={false}\n                            showThumbs={true}\n                            showIndicators={false}\n                            selectedItem={0}\n                            swipeable={true}>\n                        {props.content.map((d) => <div key={d}> <img className='goggleImg' src={d} /></div>)}    \n                    </Carousel>\n                    <h2 style={{lineHeight: 1.4}}>Generate brand new shoes<br></br>Every shoe is unique<br></br>Guaranteed!</h2>\n                </div>\n            }\n    </div>);\n}\n\nexport default CarouselComponent\n\n\n","import React from 'react'\n\nfunction DropDown(props) {\n    const classes = [{ name: 'Ankle Boot', id: 0 }, { name: 'Boat Shoe', id: 1 }, { name: 'Clog / Mule', id: 2 }, { name: 'Flat', id: 3 }, { name: 'High Heel', id: 4 }, { name: 'Knee High Boot', id: 5 }, { name: 'Loafer', id: 6 }, { name: 'Mid Calf Boot', id: 7 }, { name: 'Oxford', id: 8 }, { name: 'Sandal', id: 9 }, { name: 'Slipper', id: 10 }, { name: 'Sneaker', id: 11 }]\n    return (\n        <div className=\"box\">\n            <p className=\"dropdownParagraph\">Tell the AI what style you want it to create</p>\n            <select defaultValue={props.currentClass} onChange={(event) => props.handleChange(parseInt(event.target.value))}>\n                {classes.map((d) => <option key={d.id} value={d.id} >{d.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default DropDown;","import * as tf from '@tensorflow/tfjs';\n\nclass ImageGenerator {\n\n    constructor(onModelLoaded) {\n        new Promise( async () => {\n            this.model = await tf.loadLayersModel('jsmodel/model.json');\n            onModelLoaded()\n            }\n        )\n    }\n\n    randn_bm(samples) {\n        let nums = []\n        for(let i = 0; i<samples; i++) {\n            var u = 0, v = 0;\n            while(u === 0) u = Math.random();\n            while(v === 0) v = Math.random();\n            nums.push(Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v ))\n        }\n        return nums\n    }\n\n    generateImage(imageClass) {\n        const latent_dim = 100\n        const n_samples = 1\n        //const n_classes=12\n\n        const x_input = tf.tensor2d([this.randn_bm(latent_dim * n_samples)])\n        const z_input = x_input//x_input.reshape(n_samples, latent_dim)\n        const labels = tf.tensor1d([imageClass]) //tf.randint(0, n_classes, n_samples)\n        const raw = this.model.predict([z_input, labels])\n        const dataSync = Array.from(raw.dataSync())\n        let data = []\n\n        // load segmentation colors into format required for images\n        for (var i = 0; i < dataSync.length; i++) {\n            const pixel = ((dataSync[i] + 1) / 2.0) * 255.0\n            data.push(pixel) // red\n            data.push(pixel) // green\n            data.push(pixel) // blue\n            data.push(255) // alpha\n        }\n        const canvas = document.createElement('canvas')\n        const context = canvas.getContext('2d')\n        canvas.width = 112\n        canvas.height = 112\n        \n        let imageData = new ImageData(112, 112)\n        imageData.data.set(data)\n    \n        context.putImageData(imageData,0,0);\n        return canvas.toDataURL()\n    }\n}\n\nexport default ImageGenerator","import React from 'react'\n\nimport CarouselComponent from \"./carousel.component\";\nimport DropDown from './dropdown';\nimport ImageGenerator from './ImageGenerator'\n\nclass Home extends React.Component {\n\n    constructor() {\n        super()\n        this.handleClick = this.genIfNeeded.bind(this);\n        this.updateClass = this.updateClass.bind(this)\n        this.imageGenerator = null\n\n        this.nInitialPics = 4\n        this.state = {\n            images: [],\n            imageClass: 11,\n            loading: true\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"box\">\n                <h1 className=\"main-title\">Footwear designed by artificial intelligence</h1>\n                <DropDown currentClass ={this.state.imageClass} handleChange={(imageClass) => this.updateClass(imageClass)}></DropDown>\n                <CarouselComponent loading = {this.state.loading} content={this.state.images} handleClick={this.handleClick}></CarouselComponent>\n            </div>\n            )\n        }\n\n    componentDidMount() {\n        this.imageGenerator = new ImageGenerator(() => {\n                this.setState({images: []}, \n                    () => this.setState({imageClass: 11}, \n                        () => this.genInitialPics(this.state.imageClass))\n                )\n            }\n        )\n    }\n\n    genInitialPics() {\n        this.setState({loading: true}, () => {\n            let images = []\n            for(let i = 0; i<this.nInitialPics; i++){\n                images.push(this.imageGenerator.generateImage(this.state.imageClass))\n            }\n            this.setState({images}, () => { setTimeout( () => this.setState({loading: false}), 750)})\n        })\n    }\n\n\n    genIfNeeded(pos){\n        if(pos+1 === this.state.images.length){\n            this.setState({images: [...this.state.images, this.imageGenerator.generateImage(this.state.imageClass)]})\n            \n        }\n    }\n\n    updateClass(imageClass) {\n        if(imageClass != this.state.imageClass) {\n            this.setState({imageClass: imageClass}, () => this.genInitialPics())\n        }\n    }\n}\n\nexport default Home","import React from 'react'\nimport ReactPlayer from \"react-player\"\n\nfunction About() {\n    return(\n        <div className=\"box\">\n            <div className=\"youtubevid\">    \n                <h1>cDCGAN training on 50k pictures of shoes</h1>\n                <ReactPlayer\n                    url=\"https://www.youtube.com/watch?v=WIUlsgZSRCY&feature=youtu.be&ab_channel=MrCmento\"\n                    playing\n                    loop\n                    muted\n                    controls\n                />\n                <a href=\"http://vision.cs.utexas.edu/projects/finegrained/utzap50k/\" rel=\"noopener noreferrer\" target=\"_blank\" >Dataset provided by UT Zappos</a>\n            </div>\n            <p className='description' >A Generative Adversarial Network boils down to two opponents trying to outsmart each other. One tries to generate an authentic looking image and the other network tries to tell if it is fake or real.\n            The counterfeiter in this game learns what works and what doesn't and the discriminator also becomes better and better at detecting fakes.\n            In the beginning the fakes do not look convincing at all. The nets improve over time. At the end you can use the \"forger\" to create new pictures. </p>\n        </div>\n    )\n}\n\nexport default About","import React from 'react'\n\nfunction Header() {\n    return(\n        <header>\n            <div className = \"header-left\">\n                <img src='tes.png' className=\"header-logo\"/>\n                <p><font className='slogan'>Turning ideas into insights</font></p>\n            </div>\n            <nav className=\"header-right\">\n                <a className=\"active\" href=\"home\">Home</a>\n                <a href=\"about\">About</a>\n            </nav>\n        </header>\n    )\n}\n\nexport default Header","import React from 'react'\n\nfunction Background() {\n    return(\n        <div>\n            <div className=\"waveWrapper waveAnimation\">\n            <div className=\"waveWrapperInner bgTop\">\n                <div className=\"wave waveTop\" style={{backgroundImage: 'url(wave-top.png)'}}></div>\n            </div>\n            <div className=\"waveWrapperInner bgMiddle\">\n                <div className=\"wave waveMiddle\" style={{backgroundImage: 'url(wave-mid.png)'}}></div>\n            </div>\n            <div className=\"waveWrapperInner bgBottom\">\n                <div className=\"wave waveBottom\" style={{backgroundImage : 'url(wave-bot.png)'}}></div>\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Background","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom'\n\nimport Home from './components/Home'\nimport About from './components/About'\nimport Header from './components/Header'\nimport Background from './components/Background'\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n            <div>\n              <Background></Background>\n              <div className=\"front\">\n                <Header/> \n                  <Switch>\n                      <Route exact path=\"/\"><Redirect to=\"/home\" /></Route>\n                      <Route path='/home' exact component={Home}/>\n                      <Route path='/about' component={About}/>\n                  </Switch> \n              </div>\n            </div>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}